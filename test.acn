#f ~ Fn(Int -> Int)
f(x) :=
    a + b

#List(ty) :=
#    struct (
#        .head := ty,
#        .tail := List(ty),
#    )

#cons ~ \(T) := Fn(T -> List(T) -> List(T))
#cons(head, tail) :=
#    struct (
#        .head := head,
#        .tail := tail
#    )

#cons_int := impl_cons(int)

g(x) :=
    if
        if a == 1 then b(x) == 1 else c(x) == 4
    then b
    else if x then b
    else c

a := 1

b(x) := x
c(x) := 2*x

h(x) :=
    if a == 0 then g(x)(1)
    else if a is (
        1 then h(x),
        2 then b(x),
        3 then a(x),
        else 5
    )

map(fn, iter) :=
    if iter == nil then
        nil
    else
        fn(*iter) -> map(fn, iter->...)

reduce(fn, acc, iter) :=
    if iter == nil then
        acc
    else
        let new_acc := fn(acc, *iter);
        reduce(fn, new_acc, iter->...)

print!(args) :=
    let strjoin(list) :=
        reduce(
            \(acc, s) := acc -> s,
            "",
            list
        );
    syscall2!(0, strjoin(args))
